<?php

namespace AppBundle\Adapter\Repository;

use  \Doctrine\ORM\EntityRepository;
use  \Doctrine\ORM\EntityManager;
use  ApplicationBundle\Contract\DepartamentRepositoryInterface;
use  ApplicationBundle\Factory\DepartamentFactory;
use  AppBundle\Factory\DepartamentFactoryInf;
use  AppBundle\Adapter\Logs\LogsAdapter;

/**
 * DepartamentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartamentRepositoryDoctrine extends \Doctrine\ORM\EntityRepository implements DepartamentRepositoryInterface 
{
    
    /**
     * Finds an entity by its primary key / identifier.
     *
     * @param mixed $id     The identifier.
     * @return object|NULL  The entity instance or NULL if the entity can not be found. (DOMAIN)
     */
    public function find($id)
    {
    	$departamentInf = parent::find($id);

        $departamentDom = null;
        if (null !== $departamentInf) {
            $departamentDom = DepartamentFactory::instance($departamentInf->toArray());
        }

        return $departamentDom;
    } 

	
    /**
     * Finds all entities in the repository.
     *
     * @return array The entities (DOMAIN).
     */
    public function findAll()
	{    

        $departamentsDom = parent::findAll();
        
        return $departamentsDom;
    }  

     /**
     * Finds entities by a set of criteria.
     *
     * @param array      $criteria
     * @param array|null $orderBy
     * @param int|null   $limit
     * @param int|null   $offset
     *
     * @return array The objects. (DOMAIN)
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {

        $departamentsInf = parent::findBy($criteria,$orderBy,$limit,$offset);

        $departamentsDom = array();
        foreach($departamentsInf as $departamentInf) {
            $departamentDom = DepartamentFactory::instance($departamentInf->toArray());
            
            $departamentsDom[] = $departamentDom;
        }
        return $departamentsDom;

    }

    /**
     * Finds a single entity by a set of criteria.
     *
     * @param array $criteria
     * @param array|null $orderBy
     *
     * @return object|null The entity instance or NULL if the entity can not be found. (DOMAIN)
     */
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $departamentInf = parent::findOneBy($criteria,$orderBy);
        
        $departamentDom = null;
        if (null !== $departamentInf) {
            $departamentDom = DepartamentFactory::instance($departamentInf->toArray());
        }

        return $departamentDom;
    }



    public function create(array $params)
    {

        $em = $this->getEntityManager();
        //@todo Crear array per especificacions. DE moment a ma (en aplicacio???)

        $departamentDom = DepartamentFactory::create($params);

        $departamentInf = DepartamentFactoryInf::create($departamentDom->toArray());

        $em->persist($departamentInf);
        $em->flush();

        // S'activa el sistema de LOG (Rabbit)
        $logAdapter = new LogsAdapter();
        $logAdapter->writeLog('666','Hello hell!!');

        return $departamentDom;
    }

    public function update(array $params)
    {
        $em = $this->getEntityManager();

        $departamentDom = DepartamentFactory::instance($params);

        $departamentInf = parent::find($params['id']);

        //@todo agafar per Specification patten els
        if (null !== $departamentInf) {
            $departamentInf->setNombre($params['nombre']);
            $departamentInf->setCentreId($params['centreId']);
            $departamentInf->setCodigoMec($params['codigoMec']);
            $departamentInf->setCentreOficialId($params['centreOficialId']);

            $em->flush();  

            // S'activa el sistema de LOG (Rabbit)
            $logAdapter = new LogsAdapter();
            $logAdapter->writeLog('666','Update hell to sky!!');  
        }


        
        
        return $departamentDom;
    }



    public function delete($id)
    {
        $em = $this->getEntityManager();

        $departamentInf = parent::find($id);

        $em->remove($departamentInf);
        $em->flush();

        // S'activa el sistema de LOG (Rabbit)
        $logAdapter = new LogsAdapter();
        $logAdapter->writeLog('666','Bye hell!!');  
    }


}
